<!DOCTYPE HTML>
<!--
	Linear by TEMPLATED
    templated.co @templatedco
    Released for free under the Creative Commons Attribution 3.0 license (templated.co/license)
-->
<html>
	<head>
		<title>Aura Project - Wiki</title>
		<link rel="icon" href="images/favIconAura16x16.ico" type="image/x-icon"/>
		<link rel="shortcut icon" href="images/favIconAura16x16.ico" type="image/x-icon"/>
		<meta http-equiv="content-type" content="text/html; charset=utf-8" />
		<meta name="description" content="" />
		<meta name="keywords" content="" />
		<link href='http://fonts.googleapis.com/css?family=Roboto:400,100,300,700,500,900' rel='stylesheet' type='text/css'>
		<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>
		<script src="js/skel.min.js"></script>
		<script src="js/skel-panels.min.js"></script>
		<script src="js/init.js"></script>
		<noscript>
			<link rel="stylesheet" href="css/skel-noscript.css" />
			<link rel="stylesheet" href="css/style.css" />
			<link rel="stylesheet" href="css/style-desktop.css" />
		</noscript>
	</head>
	<body>

	<!-- Header -->
		<div id="header">
			<div id="nav-wrapper"> 
				<!-- Nav -->
				<nav id="nav">
					<ul>
						<li><a href="index.html">Accueil</a></li>
						<li><a href="webapp.html">WebApp</a></li>
						<li><a href="github.html">GitHub</a></li>
						<li><a href="docker.html">Docker</a></li>
						<li><a href="wiki.html">Wiki</a></li>
						<li><a href="contact.html">Contact</a></li>
					</ul>
				</nav>
			</div>
			<div class="container"> 
				
				<!-- Logo -->
				<div id="logo">
					<h1><a href="index.html">Aura Project</a></h1>
					<span class="tag">Polytech Annecy-Chambéry</span>
				</div>
			</div>
		</div>
	<!-- Header --> 

	<!-- Main -->
		<div id="main">
			<div class="container">
				<div class="row">

					<!-- Content -->
					<div id="content" class="8u skel-cell-important">
						<section>
							<header>
								<h2 id="dockersolution">Installation via Docker</h2>
								<span class="byline">La solution simple et universelle</span>
							</header>
							<p>Cette solution est basée sur le logiciel de gestion de conteneurs Docker. Cet outil permet d'empaqueter une application et ses dépendances dans un conteneur isolé, qui pourra être exécuté sur n'importe quelle machine possédant le logiciel. Dans un premier temps, il est donc nécessaire d'installer Docker sur votre machine</p>
							<h1 id="dockerwindows"> Installation de Docker sous Windows</h1>
							<h2>Pré-requis</h2>
							<p>Tout d’abord, vous devez utiliser Windows 7 ou plus récent. Ensuite assurez vous que votre CPU supporte la virtualisation et que celle-ci soit activée dans le BIOS et reconnue par Windows.</p>
							<h3>Sous Windows 7</h3>
							<p>Téléchargez et lancez <a href="https://www.microsoft.com/en-us/download/details.aspx?id=592">Microsoft® Hardware-Assisted Virtualization Detection Tool</a> puis suivez les instructions.</p>
							<h3>Sous Windows 8, 8.1 ou 10</h3>
							<p>Ouvrez le Gestionnaire des taches et cliquez sur Performance. Dans le menu CPU, vérifiez que la Virtualisation soit bien activée.</p>
							<img src="images/dockerPrerequis.jpg" width="250px";></img>
							<h2>Installation</h2>
							<p>Commencez par télécharger <a href="https://www.docker.com/toolbox">Docker Toolbox</a> et installez le programme. Notez que pendant l’installation Virtualbox ne doit pas être lancé.</p>
							<h2>Lancer un conteneur Docker</h2>
							<p>Avant de pouvoir lancer un conteneur Docker vous devez créer ou lancer une machine virtuelle existante.</p>
							<p>Il y a plusieurs moyens d’utiliser Docker sous Windows, via Docker Quickstart Terminal, l’invite de commandes Windows ou Powershell.</p>							
							<h2>En utilisant Docker Quickstart Terminal</h2>
							<p>Commencez par double cliquer sur l’icone du programme sur votre bureau. L’application va alors
							<ul>
								<li>Ouvrir un terminal</li>
								<li>Créer une machine virtuelle default et la démarrer</li>
								<li>Configurer la VM</li>
							</ul>
							<p class="code">    Running pre-create checks...</br>
									    Creating machine...</br>
									    (default) Copying C:Users\defaultUser.dockermachine\cache\boot2docker.iso to C:\Users\defaultUser\.dockermachine\machines\defaultboot2docker.iso...</br>
									    (default) Creating VirtualBox VM...</br>
									    (default) Creating SSH key...</br>
									    (default) Starting the VM...</br>
									    (default) Waiting for an IP...</br>
									    Waiting for machine to be running, this may take a few minutes...</br>
									    Machine is running, waiting for SSH to be available...</br>
									    Detecting operating system of created instance...</br>
									    Detecting the provisioner...</br>
									    Provisioning with boot2docker...</br>
									    Copying certs to the local machine directory...</br>
									    Copying certs to the remote machine...</br>
									    Setting Docker configuration on the remote daemon...</br>
									    Checking connection to Docker...</br>
									    Docker is up and running!</br>
									    To see how to connect Docker to this machine, run: docker-machine env default</br>
							</p>
							<p>Une fois ce processus terminé vous pouvez utiliser les commandes docker, commencez par lancer le conteneur hello-world </p>
							<p class="code">    $ docker run hello-world</br>
								    Unable to find image 'hello-world:latest' locally</br>
								    511136ea3c5a: Pull complete</br>
								    31cbccb51277: Pull complete</br>
								    e45a5af57b00: Pull complete</br>
								    hello-world:latest: The image you are pulling has been verified.</br>
								    Important: image verification is a tech preview feature and should not be</br>
								    relied on to provide security.</br>
								    Status: Downloaded newer image for hello-world:latest</br>
								    Hello from Docker.</br>
								    This message shows that your installation appears to be working correctly.</br></br>
								     
								     
								    To generate this message, Docker took the following steps:</br>
								    1. The Docker client contacted the Docker daemon.</br>
								    2. The Docker daemon pulled the "hello-world" image from the Docker Hub.</br>
								       (Assuming it was not already locally available.)</br>
								    3. The Docker daemon created a new container from that image which runs the</br>
								       executable that produces the output you are currently reading.</br>
								    4. The Docker daemon streamed that output to the Docker client, which sent it</br>
								       to your terminal.</br></br>
								     
								     
								    To try something more ambitious, you can run an Ubuntu container with:</br>
								    $ docker run -it ubuntu bash</br></br>
								     
								     
								    For more examples and ideas, visit:</br>
								    http://docs.docker.com/userguide/</br>
							</p>
							<h2>En utilisant l’invite de commandes Windows (cmd.exe)</h2>
							<p>Ouvrez une invite de commandes Windows et créez une nouvelle machine virtuelle Docker</p>
							<p class="code"> docker-machine create --driver virtualbox default </p>
							<p>Si tout se passe bien voila ce que votre terminal devrait afficher</p>
							<p class="code">    Microsoft Windows [version 10.0.10240]</br>
									    (c) 2015 Microsoft Corporation. Tous droits réservés.</br></br>
									     
									    C:Users\Noobunbox>docker-machine create --driver virtualbox default</br>
									    Running pre-create checks...</br>
									    Creating machine...</br>
									    (default) Copying C:Users\Noobunbox.dockermachine\cache\boot2docker.iso to C:\Users\Noobunbox\.dockermachine\machines\defaultboot2docker.iso...</br>
									    (default) Creating VirtualBox VM...</br>
									    (default) Creating SSH key...</br>
									    (default) Starting the VM...</br>
									    (default) Waiting for an IP...</br>
									    Waiting for machine to be running, this may take a few minutes...</br>
									    Machine is running, waiting for SSH to be available...</br>
									    Detecting operating system of created instance...</br>
									    Detecting the provisioner...</br>
									    Provisioning with boot2docker...</br>
									    Copying certs to the local machine directory...</br>
									    Copying certs to the remote machine...</br>
									    Setting Docker configuration on the remote daemon...</br>
									    Checking connection to Docker...</br>
									    Docker is up and running!</br>
									    To see how to connect Docker to this machine, run: docker-machine env default</br>
							</p>
							<p>Vous pouvez lister vos machines virtuelles créer pour fonctionner avec Docker</p>
							<p class="code">docker-machine ls</p>
							<p>Ce qui vous donne</p>
							<p class="code">    C:Users\defaultUser> docker-machine ls</br>
									    NAME                ACTIVE   DRIVER       STATE     URL                         S</br>
									    WARM</br>
									    default        *        virtualbox   Running   tcp://192.168.99.101:2376
							</p>
							<p>Maintenant « lions » les commandes du shell à notre nouvelle VM</p>
							<p class="code">C:Users\defaultUser> docker-machine env --shell cmd my-default</p>
							<p>Puis copier et coller la commande affichée afin de connecter l’invite de commandes à notre VM default</p>
							<p class="code">FOR /f "tokens=*" %i IN ('docker-machine env --shell cmd default') DO %i</p>
							<p>Lancez la commande hello-world afin de vérifier que tout fonctionne</p>
							<p class="code">C:Users\defaultUser> docker run hello-world</p>
							<h2>En utilisant Powershell</h2>
							<p>Lançons la même commande utilisée que pour l’invite de commandes afin de lier Powershell a notre VM en modifiant la variable shell</p>
							<p class="code">C:Users/defaultUser> docker-machine env --shell powershell default</p>
							<p>Powershell retourne une commande à rentrer afin qu’il puisse se connecter à la VM default. Lancez la commande</p>
							<p class="code">PS C:Users\defaultUser> docker-machine env --shell powershell default</br>
								    $Env:DOCKER_TLS_VERIFY = "1"</br>
								    $Env:DOCKER_HOST = "tcp://192.168.99.104:2376"</br>
								    $Env:DOCKER_CERT_PATH = "C:\Users\defaultUser\.dockermachine\machines\default"</br>
								    $Env:DOCKER_MACHINE_NAME = "default"</br>
								    # Run this command to configure your shell:</br>
								    # & "C:\Program Files\Docker\ Toolboxdocker-machine.exe" env --shell powershell default | Invoke-Expression</br></br>
								     
								    PS C:Users\defaultUser> & "C:\Program Files\Docker\ Toolboxdocker-machine.exe" env </br>--shell powershell default | Invoke-Expression</p>
							<p> Sources : <a href="https://www.docker.com/what-docker">What is docker</a>, <a href="https://www.docker.com/what-docker">Installation on Windows</a>, <a href="https://www.noobunbox.net/virtualisation/installer-docker-sous-windows">Installer Docker sous Windows</a></p>
							
							<h1 id="dockerubuntu">Installation sous Ubuntu</h1>
							<p>Lancer une console avec les privileges (mode sudo).<p>
							<p>Mettre à jour la liste des fichiers disponibles dans les dépôts APT.<p>
							<p class="code">$ sudo apt-get update</p>
							<p>Installer Docker</p>
							<p class="code">$ sudo apt-get install docker-engine</p>
							<p>Lancer le démon Docker.</p>
							<p class="code">$ sudo service docker start</p>
							<p>Vérifier que le programme a été correctement installé en lançant l'image hello-world.</p>
							<p class="code">$ sudo docker run hello-world</p>
							<p>Cette commande télécharge une image et lance celle-ci dans un conteneur. Lorsque le conteneur est lancé, un message apparait et le conteneur se ferme.</p>	
							<h2>Téléchager et lancer le conteneur AuraProject</h2>		
							<p>A présent, nous allons nous intéresser à la récupération de l'image du conteneur AuraProject et à son lancement.<p>
							<p>Dans un premier temps, il est nécessaire de récupérer l'image. Pour cela, il suffit d'ouvrir une fênetre de console et d'exécuter la commande suivante.</p>
							<p class="code">$ sudo docker pull jordigarnacho/auraproject</p>
							<p>Ainsi, l'image auraproject va être téléchargée.<br>
							   Une fois cette étape réalisée, nous allons lancer cette image afin de générer le conteneur et exécuter l'application.</br>Pour cela, nous utilisons la commande suivante.</p>
							<p class="code">$ sudo docker run -t -i -p 1800:1800 jordigarnacho/auraproject /bin/bash</p>
							<p>A présent, il vous est possible d'accéder à l'application WEB via votre navigateur internet.</br>
							pour cela, rendez-vous à l'adresse suivante</p>
							<p class="code">localhost:1800</p>
							<p>ou</p>
							<p class="code">0.0.0.0:1800</p>
							<p>ou encore</p>
							<p class="code">127.0.0.1:1800</p>
							<p>Vous pouvez maintenant utiliser l'application WEB de AuraProject !</p>
							<p>Pour accéder à l'application de pilotage du drone, lancer la commande suivante dans la console du conteneur auraproject.</p>
							<p class="code">bash install_SDK.sh</p> 
							</br>
							<header>
								<h2 id="packagesolution">Installation via les paquets</h2>
								<span class="byline">La solution légère pour Ubuntu</span>
							</header>
							<p>Tout d'abord, cliquer ci-dessous pour télécharger les fichiers nécessaires pour l'installation.</p>
							<a href="documents/SDK_install.zip" class="button button-style1">Télécharger</a>
							<p>Une fois le fichier téléchargé, il est nécessaire de le décompresser.</p>
							<p>Cette étape réalisée, ouvrez une console et déplacer vous via des commandes "cd" dans le répertoire des fichiers décompressés. Enfin, lancez l'installation avec la commande suivante.</p>
							<p class="code">$ sudo bash install_SDK.sh</p>
							<p>Une fois l'installation, un dossier "SDK_drone apparaitra dans votre dossier personnel.</p>
							<p>Déplacez vous dans le dossier "SDK_drone" dans la console à l'aide de la commande "cd".</br>Ensuite, exécutez la commande suivante.</p>
							<p class="code">$ source /out/arsdk-native/staging/native-wrapper.sh</p>
							<p>Enfin, exécutez la commande suivante pour être en capacité de lancer les programmes de pilotage.</p>
							<p class="code">$ BebopDroneDecodeStream</p>
							<p>La solution de pilotage de drone se lance! Si votre wifi est connectée au drone, vous serez en mesure de le piloter!</p>
						</section>
					</div>

					<!-- Sidebar -->
					<div id="sidebar" class="4u">
						<section>
							<header>
								<h2>Sommaire</h2>
							</header>
							<div class="row">
								<section class="6u">
									<ul class="default">
										<li><a href="#dockersolution">Installation via Docker</a></li>
										<li><a href="#packagesolution">Installation via les paquets</a></li>
										<li><a href="#dockerwindows">Installation de Docker sous Windows</a></li>
										<li><a href="#dockerubuntu">Installation de Docker sous Ubuntu</a></li>
									</ul>
							</div>
						</section>
					</div>
					
				</div>
			</div>
		</div>
	<!-- /Main -->

	<!-- Tweet -->
		<div id="tweet">
			<div class="container">
				<section>
					<blockquote>&ldquo;Développons un drone autonome tout en gardant les pieds sur Terre.&rdquo;</blockquote>
				</section>
			</div>
		</div>

	<!-- Footer -->
		<div id="footer">
			<div class="container">
				<section>
					<header>
						<h2>Suivez-nous</h2>
						<span class="byline">Rendez-vous sur notre page Facebook</span>
					</header>
					<ul class="contact">
						<li class="active"><a href="https://www.facebook.com/auraproject74/" class="fa fa-facebook"><span>Facebook</span></a></li>
					</ul>
				</section>
			</div>
		</div>

	<!-- Copyright -->
		<div id="copyright">
			<div class="container">
				Contact: <a href="mailto:jordi.garnacho@etu.univ-smb.fr">AuraProject</a>
			</div>
		</div>

	</body>
</html>
